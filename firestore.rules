rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function canAccountCreateTeams() {
      return request.resource.data.account != null
        && canAccountCreateTeamsDoc(get(request.resource.data.account));
    }
    function canAccountCreateTeamsDoc(account) {
      return account != null
        && account.data.entitlements != null
        && "teams" in account.data.entitlements
        && account.data.entitlements.teams > 0
        && canAdministerAccountDoc(account);
    }
    function canAdministerAccountDoc(account) {
      return account != null
        && "admins" in debug(account.data)
        && request.auth.uid in account.data.admins;
    }

    function canAdministerTeam(teamId) {
      return canAdministerTeamDoc(get(/databases/$(database)/documents/teams-teams/$(teamId)));
    }
    function canAdministerTeamDoc(team) {
      return team != null
        && (request.auth.uid in team.data.admins)
        || (team.data.account != null && canAdministerAccountDoc(get(team.data.account)));
    }
    function isTeamMember(teamId) {
      return isTeamMemberDoc(get(/databases/$(database)/documents/teams-teams/$(teamId)));
    }
    function isTeamMemberDoc(team) {
      return team != null
        && (request.auth.uid in team.data.members);
    }
    function isMemberSelfRemove() {
      return isOnlyMembersAffected(request.resource.data.diff(resource.data))
        && isMemberSelfRemoveDiff(request.resource.data.members.diff(resource.data.members))
    }
    function isOnlyMembersAffected(diff) {
      return diff.affectedKeys().hasOnly(["members"])
    }
    function isMemberSelfRemoveDiff(diff) {
      return diff.affectedKeys().hasOnly([request.auth.uid])
        && diff.removedKeys().hasOnly([request.auth.uid])
    }

    function canCreateInvite(){
      return (request.resource.data.team != null)
        && canAdministerTeamDoc(get(request.resource.data.team))
        && isValidInvite();
    }
    function isValidInvite() {
      return request.resource.data.from[4] == request.auth.uid;
    }
    function isAcceptInvitation() {
      return request.auth.token.email_verified
        && request.auth.token.email.lower() == resource.data.to.email.lower()
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["accepted"])
        && request.resource.data.accepted.keys().hasOnly(["user", "when"])
        && request.resource.data.accepted.when == request.time;
    }

    match /teams-invites/{inviteId} {
      allow create, read, update, delete: if request.auth != null && canCreateInvite()
      allow update: if request.auth != null && isAcceptInvitation();
    }

    match /teams-users/{userId} {
        allow create, read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /teams-users-public/{userId} {
      allow read: if request.auth != null;
    }

    match /teams-teams/{teamId} {
        allow read: if request.auth != null && isTeamMemberDoc(resource);
        allow create: if request.auth != null && canAccountCreateTeams();
        allow update, delete: if request.auth != null && (canAdministerTeam(teamId) || isMemberSelfRemove());
    }

    match /teams-accounts/{accountId} {
      allow read: if request.auth != null
        && resource.data != null
        && resource.data.admins != null
        && resource.data.admins[request.auth.uid] != null
    }

  }

}
